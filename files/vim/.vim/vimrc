" Author: Matt Soucy

" vim settings {{{
set laststatus=2
set tabstop=4
set shiftwidth=0 " Set it to the tabstop value
set number
if exists('&relativenumber')
  set relativenumber
endif
set ignorecase
set modeline
set nobackup
set noswapfile
set wrap
set hidden
set hlsearch
if exists('&cc')
  set cc=80,120
endif
set cursorline cursorcolumn
set shortmess+=I " Don't show the intro message
syntax on "Syntax highlighting
" Make splits go southeast
set splitbelow splitright
" }}}

" Plugins {{{
" Load plugins {{{
if !empty(globpath(&rtp, "autoload/plug.vim"))
  if has('nvim')
    " NeoVim wants to store them in $XDG_CONFIG_HOME, but we want to
    " share them between nvim and vim
    let g:plug_home = expand('~/.vim/plugged')
  endif
  call plug#begin()
  runtime! pluglists/*.vim
  call plug#end()
endif

filetype plugin indent on
syntax on
" }}}

" Plugin settings {{{
let g:table_mode_corner = '|'
let g:vim_markdown_folding_disabled=1
let g:netrw_liststyle=3
let g:haskell_conceal_wide=1
" Clang-format {{{
let g:clang_format#auto_format = 0
let g:clang_format#code_style = 'llvm'
let g:clang_format#style_options = {
    \ 'IndentWidth': 4,
    \ 'TabWidth': 4,
    \ 'UseTab': "Always",
    \ 'AlwaysBreakTemplateDeclarations': "true",
    \ 'ColumnLimit': 80
    \}
let g:clang_format#auto_formatexpr = 1
" }}}
" Syntastic {{{
let g:syntastic_cpp_config_file = ".syntastic"
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_d_checkers = ['dub']
let g:syntastic_mode_map = {
        \ "mode": "active",
        \ "active_filetypes": [],
        \ "passive_filetypes": ["d"] }
" }}}
" Neomake {{{
let g:neomake_open_list=2
" }}}
" tmuxline {{{
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#W',
      \'c'    : '#H',
      \'win'  : '#I | #W',
      \'cwin' : '#I | #W',
      \'y'    : '%a',
      \'z'    : '%R'}

" }}}

" }}}

" }}} Plugins

" Color {{{
set background=dark
colorscheme desert " Use desert if custom themes aren't installed yet
if has("gui_running") || &t_Co == 88 || &t_Co == 256
  silent! colorscheme PaperColor
endif
" }}}

" Keybindings {{{

function! RunMaker(...)
  if exists(':Neomake')
    :Neomake
  else
    :make | copen
  endif
endfunction

"Mapped some FUNCTION keys to be more useful
map <F9> :call RunMaker()<Return>
map <F10> :cprevious<Return>
map <F11> :cnext<Return>

" paste mode toggle (needed when using autoindent/smartindent)
map <F7> :set paste<CR>
map <F8> :set nopaste<CR>
imap <F7> <C-O>:set paste<CR>
imap <F8> <C-O>:set nopaste<CR>
set pastetoggle=<F12>

"This is a nice buffer switcher
nnoremap <F5> :buffers<CR>:buffer<Space>

imap jj <ESC>
nmap <silent> <Leader>/ :nohlsearch<CR>
nmap <silent> <Leader>l :lclose<CR>
nmap <silent> <Leader>r :so $MYVIMRC<CR>

" Move by row, not line
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Highlight line and column
nnoremap H :set cursorline! cursorcolumn!<CR>

cabbr <expr> %% expand('%:p:h')

if exists(":TagbarToggle")
  nmap <silent> <Leader>t :TagbarToggle<CR>
endif
if exists(":Unite")
  nnoremap <C-p> :Unite file_rec/async<CR>
  nnoremap <space>/ :Unite grep:.<cr>
  if executable('ag')
        let g:unite_source_grep_command='ag'
        let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
        let g:unite_source_grep_recursive_opt=''
  elseif executable('ack')
        let g:unite_source_grep_command='ack'
        let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
        let g:unite_source_grep_recursive_opt=''
  endif
endif
" }}}

" Completion {{{
"Set a nice Omnifunc - <CTRL>X <CTRL>O
set ofu=syntaxcomplete#Complete

" Make vim popup behave more like an IDE POPUP
set completeopt=longest,menuone
" }}}

" Lightline controls {{{
let g:lightline = {
      \ 'colorscheme': g:colors_name,
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'modified', 'fugitive', 'filename' ]],
      \   'right': [ [ 'neomake', 'lineinfo' ],
      \              ['percent'],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction
" }}}

" Custom term behavior {{{
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif
" }}}

if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" vim: foldmethod=marker expandtab
