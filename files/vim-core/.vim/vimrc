" Author: Matt Soucy

" {{{ vim settings
set laststatus=2
set shiftwidth=4
set softtabstop=4
set expandtab
set number
set mouse=a
set ignorecase
set modeline
set nobackup
set noswapfile
set wrap
set hidden
set hlsearch
if exists('&cc')
    set cc=80,120
endif
set cursorline cursorcolumn
set shortmess+=I " Don't show the intro message
set splitbelow splitright " Make splits go southeast
if has('gui_running')
    set guioptions+=M
endif
if exists('&inccommand')
    set inccommand=split
endif
syntax on "Syntax highlighting
" }}}

" {{{ Plugins

function! Cond(cond, ...)
    " Conditionally enable plugins for vim-plug
    let opts = get(a:000, 0, {})
    return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

if !empty(globpath(&rtp, "autoload/plug.vim"))
    if has('nvim')
        " NeoVim wants to store them in $XDG_CONFIG_HOME, but we want to
        " share them between nvim and vim
        let g:plug_home = expand('~/.vim/plugged')
    endif
    call plug#begin()
    " Split plugins into multiple files
    " to selectively enable based on the environment
    runtime! pluglists/*.vim
    call plug#end()
else
    filetype plugin indent on
    syntax on
endif

" }}} Plugins

" {{{ Color
function! s:UseColors(...)
    for scheme in a:000
        if len(globpath(&rtp, 'colors/'.scheme.'.vim'))
            exec 'colorscheme '.scheme
            break
        endif
    endfor
endfunction

set background=dark
call s:UseColors('PaperColor', 'badwolf', 'desert')
hi clear Conceal " Causes weird color errors otherwise
" }}}

" {{{ Keybindings

function! RunMaker(...)
    if exists(':Neomake')
        :Neomake
    else
        :make | copen
    endif
endfunction

" Fix highlighting issues
noremap <F3> <Esc>:syntax sync fromstart<CR>
inoremap <F3> <C-o>:syntax sync fromstart<CR>

"Mapped some FUNCTION keys to be more useful
noremap <F8> :call RunMaker()<Return>
noremap <F10> :cprevious<Return>
noremap <F11> :cnext<Return>

" paste mode toggle (needed when using autoindent/smartindent)
noremap <F7> :set paste<CR>
noremap <F7> :set nopaste<CR>
inoremap <F6> <C-O>:set paste<CR>
inoremap <F8> <C-O>:set nopaste<CR>
set pastetoggle=<F12>

"This is a nice buffer switcher
nnoremap <F5> :buffers<CR>:buffer<Space>

" Quick escape insert mode
inoremap jj <ESC>

" Hide search highlighting
nmap <silent> <Leader>/ :nohlsearch<CR>
nmap <silent> <Leader>l :lclose<CR>

" Re-source config
nmap <silent> <Leader>r :so $MYVIMRC<CR>

" Move by row, not line
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Highlight line and column
nnoremap <silent> <Leader>h :set cursorline! cursorcolumn!<CR>

" Use %% in the commands bar to mean 'current file directory'
cabbr <expr> %% expand('%:p:h')

" Select a program to search with
if executable('ag')
    set grepprg=ag\ --column\ --nopager\ --nocolor\ --nogroup\ $*\ /dev/null"
elseif executable('ack')
    set grepprg=ack\ --column\ --nopager\ --nocolor\ --nogroup\ $*\ /dev/null"
endif
" }}}

" {{{ Completion
"Set a nice Omnifunc - <CTRL>X <CTRL>O
set ofu=syntaxcomplete#Complete

" Make vim popup behave more like an IDE POPUP
set completeopt=longest,menuone
" }}}

" {{{ Custom term behavior
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif
" }}}

runtime! ~/.vimrc.local

" vim: foldmethod=marker expandtab
